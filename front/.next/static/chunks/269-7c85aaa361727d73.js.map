{"version":3,"file":"static/chunks/269-7c85aaa361727d73.js","mappings":"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","sources":["webpack://_N_E/./components/Userprofile.js","webpack://_N_E/./components/LoginForm.js","webpack://_N_E/./components/AppLayout.js","webpack://_N_E/./components/imagesZoom/styles.js","webpack://_N_E/./components/imagesZoom/index.js","webpack://_N_E/./components/Postimages.js","webpack://_N_E/./components/CommentForm.js","webpack://_N_E/./components/PostCardContent.js","webpack://_N_E/./components/Follow.js","webpack://_N_E/./components/PostCard.js","webpack://_N_E/./hooks/useinput.js"],"sourcesContent":["import { Avatar, Button, Card } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {useCallback} from 'react';\r\nimport Link from 'next/link'\r\n\r\nimport {logoutRequestAction} from '../reducers/user'\r\n\r\nconst UserProfile = () => {\r\n  const dispath = useDispatch();\r\n  const {me,logOutLoading} = useSelector((state)=>state.user)   // 구조화할당 안하면 me =useSelector((state)=>state.user.me)\r\n\r\n  const logout = useCallback(()=>{\r\n    dispath(logoutRequestAction());\r\n  },[])\r\n  return (\r\n    <Card\r\n     actions={[\r\n      <div key=\"twit\"><Link href={`/user/${me.id}`}><a>트윗 수<br />{me.Posts.length}</a></Link></div>,\r\n      <div key=\"following\"><Link href={'/profile'}><a>팔로잉<br />{me.Followings.length}</a></Link></div>,\r\n      <div key=\"follower\"><Link href={'/profile'}><a>팔로워<br />{me.Followers.length}</a></Link></div>,\r\n     ]}>\r\n\r\n      <Card.Meta avatar={<Avatar>{me.nickname[0]}</Avatar>} title={me.nickname}/>\r\n      <Button onClick={logout} loading={logOutLoading}>로그 아웃</Button>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default UserProfile;","import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport Link from 'next/link';\r\nimport styled from 'styled-components';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginAction, loginRequestAction } from '../reducers/user';\r\nimport useinput from \"../hooks/useinput\";\r\n\r\n\r\n\r\nconst ButtonWrapper = styled.div`\r\nmargin-top:10px;\r\n`;\r\nconst FormWrapper = styled(Form)`\r\n  padding : 10px;\r\n`;\r\nconst LoginForm = () => {\r\n  const { logInLoading, logInError } = useSelector((state) => state.user);\r\n  const dispath = useDispatch();\r\n\r\n  const [email, onChangeEmail] = useinput('');\r\n  const [password, onChangePassword] = useinput('');\r\n\r\n  const onSubmitForm = useCallback(() => {\r\n    dispath(loginRequestAction({ email, password }));\r\n  }, [email, password]);\r\n\r\n  useEffect(() => {\r\n    if (logInError) {\r\n      alert(logInError);\r\n    }\r\n  },[logInError])\r\n\r\n  return (\r\n    <FormWrapper onFinish={onSubmitForm}>\r\n      <div>\r\n        <label htmlFor='user-id' type='email'>이메일</label>\r\n        <br />\r\n        <Input name='user-id' value={email} onChange={onChangeEmail} required />\r\n      </div>\r\n      <div>\r\n        <label htmlFor='user-password'>비밀번호</label>\r\n        <br />\r\n        <Input name='user-password' type='password' value={password} onChange={onChangePassword} required />\r\n      </div>\r\n      <ButtonWrapper>\r\n        <Button type='primary' htmlType='submit' loading={logInLoading} >로그인</Button>\r\n        <Link href='/signUp'><a><Button>회원가입</Button></a></Link>\r\n      </ButtonWrapper>\r\n    </FormWrapper>\r\n  );\r\n\r\n}\r\nexport default LoginForm;","import PropTypes from 'prop-types';\r\nimport Link from 'next/link';\r\nimport { Menu, Input, Row, Col } from 'antd';\r\n\r\nimport { useSelector } from 'react-redux'\r\nimport UserProfile from \"./Userprofile\"\r\nimport LoginForm from \"./LoginForm\"\r\nimport styled from 'styled-components';\r\nimport useinput from '../hooks/useinput';\r\nimport {useCallback} from 'react';\r\nimport  Router  from 'next/router';\r\n\r\nconst SearchInput = styled(Input.Search)`\r\n  vertical-align : middle;\r\n`;\r\n\r\n\r\nconst AppLayout = ({ children }) => {\r\n  const [searchInput,onchangeSearchInput]= useinput('');\r\n  const {me} = useSelector((state)=>state.user);\r\n\r\n  const onSearch = useCallback(()=>{\r\n    Router.push(`/hashtag/${searchInput}`);\r\n  },[searchInput])\r\n  return (\r\n    <div>\r\n      <Menu mode=\"horizontal\">\r\n        <Menu.Item key='123'><Link href=\"/\"><a>노드버드</a></Link></Menu.Item>\r\n        <Menu.Item key='234'><Link href=\"/profile\"><a>프로필</a></Link></Menu.Item>\r\n        <Menu.Item key='456'> <SearchInput enterButton\r\n        value={searchInput} \r\n        onChange={onchangeSearchInput} \r\n        onSearch={onSearch}\r\n         /></Menu.Item>\r\n\r\n        <Menu.Item key='kekeke'><Link href=\"/signUp\"><a>회원가입</a></Link></Menu.Item>\r\n      </Menu>\r\n      <Row gutter={8}>\r\n        <Col xs={24} md={6} >\r\n          {me ? <UserProfile /> : <LoginForm/>}\r\n        </Col>\r\n        <Col xs={24} md={12} >\r\n          {children}\r\n        </Col>\r\n        <Col xs={24} md={6} >\r\n          <a href='http://localhost:3065/unfinished' target=\"_blank\" rel=\"noreferrer noopener\">업데이트 내역 보기</a>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nAppLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\nexport default AppLayout;","import styled, { createGlobalStyle } from 'styled-components';\r\nimport { CloseOutlined } from '@ant-design/icons';\r\n\r\nexport const Global = createGlobalStyle`\r\n  .slick-slide {\r\n    display: inline-block;\r\n  }\r\n  .ant-card-cover {\r\n    transform: none !important;\r\n  }\r\n`\r\n\r\nexport const Overlay = styled.div`\r\n  position: fixed;\r\n  z-index: 5000;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n`;\r\n //헤더안에 &h1 이런식으로 css 넣는다\r\nexport const Header = styled.header`\r\n  height: 44px;\r\n  background: white;\r\n  position: relative;\r\n  padding: 0;\r\n  text-align: center;\r\n  \r\n  & h1 {                    \r\n    margin: 0;\r\n    font-size: 17px;\r\n    color: #333;\r\n    line-height: 44px;\r\n  }\r\n`;\r\n\r\nexport const SlickWrapper = styled.div`\r\n  height: calc(100% - 44px);\r\n  background: #090909;\r\n`;\r\n\r\nexport const CloseBtn = styled(CloseOutlined)`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  padding: 15px;\r\n  line-height: 14px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Indicator = styled.div`\r\n  text-align: center;\r\n  \r\n  & > div {\r\n    position: fixed;\r\n    width: 75px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    border-radius: 15px;\r\n    background: #313131;\r\n    display: inline-block;\r\n    text-align: center;\r\n    color: white;\r\n    font-size: 15px;\r\n    bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const ImgWrapper = styled.div`\r\n  padding: 32px;\r\n  text-align: center;\r\n  \r\n  & img {\r\n    margin: 0 auto;\r\n    max-height: 750px;\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Slick from 'react-slick';\r\nimport { Overlay, Header, CloseBtn, SlickWrapper, ImgWrapper, Indicator, Global } from './styles';\r\nimport backurl from '../../config/config';\r\n\r\nconst ImagesZoom = ({ images, onClose }) => {\r\n  const [currentSlide, setCurrentSlide] = useState(0);\r\n  console.log(onClose);\r\n  return (\r\n    <Overlay>\r\n      <Global />\r\n      <Header>\r\n        <h1>상세 이미지</h1>\r\n        <CloseBtn onClick={onClose} />\r\n      </Header>\r\n      <SlickWrapper>\r\n        <div>\r\n          <Slick\r\n            initialSlide={0}  //시작 페이지\r\n            beforeChange={(slide, newSlide) => setCurrentSlide(newSlide)}\r\n            infinite   //끝사진에서 첫번째로\r\n            arrows={false}\r\n            slidesToShow={1}  //한번에 보여줄 사진 수\r\n            slidesToScroll={1}  //넘길 사진\r\n          >\r\n            {images.map((v) => (\r\n              <ImgWrapper key={v.src}>\r\n                <img src={`${backurl()}/${v.src}`} alt={v.src} />\r\n              </ImgWrapper>\r\n            ))}\r\n          </Slick>\r\n          <Indicator>\r\n            <div> \r\n              {currentSlide + 1}\r\n              {' '}\r\n              /\r\n              {images.length}\r\n            </div>\r\n          </Indicator>\r\n        </div>\r\n      </SlickWrapper>\r\n    </Overlay>\r\n  );\r\n};\r\n\r\nImagesZoom.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.shape({\r\n    src: PropTypes.string,\r\n  })).isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImagesZoom;","import PropTypes from 'prop-types';\r\nimport { useCallback, useState, useMemo } from 'react'\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { Card } from \"antd\";\r\nimport ImageZoom from './imagesZoom';\r\nimport backurl from '../config/config';\r\n\r\n\r\nconst PostImages = ({ images }) => {\r\n  //스타일설정\r\n  const style = useMemo(() => ({\r\n    display: 'inline-block',\r\n    width: '50%',\r\n    textAlign: 'center',\r\n  }), [])\r\n\r\n\r\n  const [showImageZoom, setShowImageZoom] = useState(false);\r\n\r\n  const onZoom = useCallback(() => {\r\n    setShowImageZoom(true);\r\n  }, []);\r\n\r\n  const onClose = useCallback(() => {\r\n    setShowImageZoom(false);\r\n  }, [])\r\n\r\n  if (images.length === 1) {\r\n    return (\r\n      <div>\r\n        <img role=\"presentation\" src={`${backurl()}/${images[0].src}`} alt={images[0].src} onClick={onZoom} />\r\n        {showImageZoom && <ImageZoom images={images} onClose={onClose} />}\r\n      </div>\r\n    );\r\n  }\r\n  if (images.length === 2) {\r\n    return (\r\n      <div>\r\n        <img role=\"presentation\" width=\"50%\" src={`${backurl()}${images[0].src}`} alt={images[0].src} onClick={onZoom} />\r\n        <img role=\"presentation\" width=\"50%\" src={`${backurl()}${images[1].src}`} alt={images[1].src} onClick={onZoom} />\r\n        {showImageZoom && <ImageZoom images={images} onClose={onClose} />}\r\n\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <img role=\"presentation\" width=\"50%\" src={`${backurl()}/${images[0].src}`} alt={images[0].src} onClick={onZoom} />\r\n      <div role='presentation' style={style} onClick={onZoom}>\r\n        <PlusOutlined />\r\n        <br />\r\n        더보기\r\n      </div>\r\n      {showImageZoom && <ImageZoom images={images} onClose={onClose} />}\r\n\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nPostImages.prototype = {\r\n  images: PropTypes.arrayOf(PropTypes.object),\r\n}\r\nexport default PostImages;","import PropTypes from 'prop-types';\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { useCallback,useEffect } from \"react\";\r\nimport useinput from '../hooks/useinput';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\n\r\n\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const [commentText, onChangeComment,setCommentText] = useinput('');\r\n  const { addCommentDone,addCommentLoading } = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: { content: commentText, postId: post.id, userId: id },\r\n    });\r\n  }, [commentText])\r\n\r\n  useEffect(()=>{\r\n    if (addCommentDone){\r\n      setCommentText('');\r\n    }\r\n  },[addCommentDone]);\r\n\r\n  //아이디\r\n  const id = useSelector((state) => state.user).me?.id;  //옵셔널 체이닝 AA ?. BB == 있으면 해라\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Form.Item>\r\n        <Input.TextArea value={commentText} onChange={onChangeComment} rows={4} />\r\n        <Button type='primary' htmlType='submit' loading={addCommentLoading} style={{zIndex:1}}>작성</Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n\r\nCommentForm.prototype = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createAt: PropTypes.object,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n  }).isRequired,\r\n};\r\nexport default CommentForm;\r\n","import Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst PostCardContent = ({ postData }) => {   //#해시태그 #익스프레스\r\n  return (\r\n    <div>\r\n      {postData.split(/(#[^\\s#]*)/g).map((v) => {\r\n        if (v.match(/(#[^\\s#]*)/g)) {\r\n          return (\r\n            <Link\r\n              href={`/hashtag/${v.slice(1)}`}\r\n              key={v}\r\n            >\r\n              <a>{v}</a>\r\n            </Link>\r\n          )\r\n        }\r\n        return v;\r\n      })}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nPostCardContent.prototype = {\r\n  postData: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default PostCardContent;\r\n","import { Button } from \"antd\";\r\nimport { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from \"../reducers/user\";\r\n\r\nconst FollowButton = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const { me, followLoading, unfollowLoading } = useSelector((state) => state.user);\r\n  \r\n  const isFollowing = me && me.Followings.find((e) => e.id === post.User.id);\r\n  const onClick = useCallback(() => {\r\n    if (isFollowing) {\r\n      dispatch({\r\n        type: UNFOLLOW_REQUEST,\r\n        data: post.User.id,\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: FOLLOW_REQUEST,\r\n        data: post.User.id,\r\n      })\r\n    }\r\n  }, [isFollowing])\r\n\r\n  if(post.User.id === me.id){\r\n    return null;\r\n  }\r\n  return (<Button loading={followLoading || unfollowLoading} onClick={onClick}>\r\n    {isFollowing ? '언팔로우' : '팔로우'}\r\n  </Button>)\r\n}\r\n\r\nexport default FollowButton;","import { Card, Button, Popover, Avatar, List, Comment } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostImages from './Postimages';\r\nimport { useMemo, useState, useCallback } from 'react'\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\r\nimport FollowButton from './Follow';\r\nimport Link from 'next/link';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ko'; // 이줄 추가\r\n\r\n\r\nconst PostCard = ({ post }) => {\r\n  moment.locale('ko'); //날짜 라이브러리 한글로 바꾸기\r\n  const id = useSelector((state) => state.user).me?.id;  //옵셔널 체이닝 AA ?. BB == 있으면 해라\r\n\r\n  const dispatch = useDispatch();\r\n  //css영역\r\n  const style = useMemo(() => ({\r\n    marginBottom: '20px',\r\n  }), [])\r\n  //state 영역\r\n  const [comment, setComment] = useState(false);\r\n\r\n\r\n  //이벤트 처리 영역\r\n  const onLike = useCallback(() => {\r\n    dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, []);\r\n\r\n  const onUnLike = useCallback(() => {\r\n    dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: post.id,\r\n    })\r\n  }, []);\r\n\r\n\r\n  const onComment = useCallback(() => {\r\n    setComment(prev => !prev);\r\n  }, [])\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    })\r\n  }, []);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    }, [id]);\r\n  })\r\n  const liked = post.Likers.find((e) => e.id === id);\r\n\r\n  return (\r\n    <div style={style}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"reteet\" onClick={onRetweet} />,   //리트윗 아이콘 배열엔 반드시 key\r\n          liked\r\n            ? <HeartTwoTone twoToneColor='red' key=\"heart\" onClick={onUnLike} />  //하트아이콘 비활성화\r\n            : <HeartOutlined key=\"heart\" onClick={onLike} />,     //하트 아이콘 활성화\r\n          <MessageOutlined key=\"message\" onClick={onComment} />,   //리플 아이콘\r\n          <Popover key=\"more\" content={(\r\n            <Button.Group>\r\n              {id && post.User.id === id ? (<><Button type='primary'>수정</Button>\r\n                <Button type='danger' onClick={onRemovePost}>삭제</Button> </>)\r\n                : <Button>신고</Button>}\r\n            </Button.Group>\r\n          )}>\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n        extra={id && <FollowButton post={post} />}\r\n      >\r\n\r\n        {post.RetweetId && post.Retweet\r\n          ? (\r\n            <Card\r\n              cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n            >\r\n              <div style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY-MM-DD')}</div>\r\n              <Card.Meta\r\n                avatar={<Link href={`/user/${post.Retweet.User.id}`}>\r\n                  <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar> </a>\r\n                </Link>}\r\n                title={post.Retweet.User.nickname}\r\n                description={<PostCardContent postData={post.Retweet.content} />}\r\n              />\r\n            </Card>\r\n          )\r\n          : (\r\n            <>\r\n              <div style={{ float: 'right' }}>{moment(post.createdAt).fromNow()}</div>\r\n              <Card.Meta\r\n                avatar={<Link href={`/user/${post.User.id}`}>\r\n                  <a><Avatar>{post.User.nickname[0]}</Avatar> </a>\r\n                </Link>}\r\n                title={post.User.nickname}\r\n                description={<PostCardContent postData={post.content} />}\r\n              />\r\n            </>\r\n          )}\r\n      </Card>\r\n      {comment && (\r\n        <div>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length}개의 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={(item) => (\r\n              <li>\r\n                <Comment author={item.User.nickname}\r\n                  avatar={<Link href={`/user/${item.User.id}`}>\r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                  </Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n    </div >\r\n\r\n  )\r\n}\r\n\r\nPostCard.prototype = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n  }).isRequired,\r\n};\r\nexport default PostCard;","import { useState, useCallback } from 'react';\r\n\r\nexport default (initValue = null) => {\r\n  const [value, setter] = useState(initValue);\r\n  const handler = useCallback((e) => {\r\n    setter(e.target.value);\r\n  }, []);\r\n  return [value, handler,setter];\r\n};"],"names":["dispath","useDispatch","useSelector","state","user","me","logOutLoading","logout","useCallback","logoutRequestAction","actions","href","id","Posts","length","Followings","Followers","avatar","nickname","title","onClick","loading","ButtonWrapper","styled","FormWrapper","Form","logInLoading","logInError","useinput","email","onChangeEmail","password","onChangePassword","onSubmitForm","loginRequestAction","useEffect","alert","onFinish","htmlFor","type","name","value","onChange","required","htmlType","SearchInput","Input","children","searchInput","onchangeSearchInput","onSearch","Router","mode","enterButton","gutter","xs","md","target","rel","Global","createGlobalStyle","Overlay","Header","SlickWrapper","CloseBtn","CloseOutlined","Indicator","ImgWrapper","images","onClose","useState","currentSlide","setCurrentSlide","console","log","initialSlide","beforeChange","slide","newSlide","infinite","arrows","slidesToShow","slidesToScroll","map","v","src","backurl","alt","PostImages","style","useMemo","display","width","textAlign","showImageZoom","setShowImageZoom","onZoom","role","PlusOutlined","prototype","PropTypes","CommentForm","post","commentText","onChangeComment","setCommentText","addCommentDone","addCommentLoading","dispatch","onSubmitComment","ADD_COMMENT_REQUEST","data","content","postId","userId","rows","zIndex","User","createAt","Comments","Images","isRequired","PostCardContent","postData","split","match","slice","followLoading","unfollowLoading","isFollowing","find","e","UNFOLLOW_REQUEST","FOLLOW_REQUEST","PostCard","moment","marginBottom","comment","setComment","onLike","LIKE_POST_REQUEST","onUnLike","UNLIKE_POST_REQUEST","onComment","prev","onRemovePost","REMOVE_POST_REQUEST","onRetweet","RETWEET_REQUEST","liked","Likers","cover","RetweetOutlined","HeartTwoTone","twoToneColor","HeartOutlined","MessageOutlined","EllipsisOutlined","RetweetId","extra","Follow","Retweet","float","createdAt","format","description","fromNow","header","itemLayout","dataSource","renderItem","item","author","initValue","setter","handler"],"sourceRoot":""}